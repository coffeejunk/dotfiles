#!/usr/bin/env bash
# Usage: global provide <gem-name>
#        global install <gem-name> [-v <version>]
#        global uninstall <gem-name> [-v <version>]
#
# `global` is a specialized wrapper for the `gem` command that you can use to
# install command-line tools in an isolated location in the way that is
# independent of the current rbenv/RVM version.
#
# Put `global` somewhere in your PATH, and add this to your shell config
# *after* the lines that configure rbenv/RVM:
#
#   export PATH=~/.gem/global/bin:"$PATH"
#

# I use `global provide` to install: travis heroku bcat t pomo cane cloudapp
#
# Also Jekyll:
#   https://help.github.com/articles/using-jekyll-with-pages#troubleshooting
#   global i maruku -v 0.6.0
#   global i liquid -v 2.4.1
#   global i redcarpet -v 2.1.1
#   global i rdiscount -v 1.6.8
#   global i jekyll -v 0.12
#   global binstubs jekyll
#
# Stolen from: https://raw.github.com/mislav/dotfiles/master/bin/global

set -e

export GEM_HOME="$HOME/.gem/global"
export RBENV_VERSION=2.0.0-p247  # configure your Ruby version of choice here
export -n RUBY_GC_MALLOC_LIMIT
export -n RUBY_FREE_MIN

cmd="$1"
[[ -z $cmd ]] && die=1 || die=0

if [[ $die -gt 0 || $1 = "-h" || $1 = "--help" ]]; then
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0" >&$((die+1))
  exit $die
fi

shift 1

generate_binstubs() {
  for file in "$GEM_HOME/gems/$1"-*/bin/*; do
    generate_binstub "$1" "${file##*/}"
  done
}

generate_binstub() {
  gemname="${1?}"
  stubname="${2?}"
  binstub="$GEM_HOME/bin/$stubname"

  mkdir -p "${binstub%/*}"
  cat > "$binstub" <<SH
#!$(rbenv which ruby)
ENV['GEM_HOME'] = ENV['GEM_PATH'] = '$GEM_HOME'
\$0 = File.basename(\$0)
require 'rubygems'
gem '$gemname'
load Gem.bin_path('$gemname', '$stubname')
SH
  chmod +x "$binstub"
}

flags=
if [[ "install" = ${cmd}* || "update" = ${cmd}* ]]; then
  # don't install binstubs; later we'll manually setup just the ones we need:
  flags="--no-rdoc --no-ri --bindir ${TMPDIR:-/tmp}/trashbin"
  if [[ "update" = ${cmd}* ]]; then
    gemname="$1"
    if [ -z "$gemname" ]; then
      echo "you must provide a gem name for \`update'" >&2
      exit 1
    fi
    # match the exact gem name instead of acting as a pattern
    flags="$flags ^$gemname$"
    shift 1
  fi
elif [[ "uninstall" = ${cmd}* ]]; then
  flags="--all --executables"
elif [[ "binstubs" = ${cmd}* ]]; then
  generate_binstubs "$1"
  exit
elif [[ "provide" = ${cmd}* ]]; then
  $0 install "$1"
  $0 binstubs "$1"
  exit
fi

GEM_PATH="$GEM_HOME" exec gem "$cmd" $flags "$@"
