set nocompatible

" load plugins
call pathogen#infect()

set relativenumber
set ruler
syntax on

" line length
set formatoptions=qrn1
set textwidth=79
set colorcolumn=80

" setup the leader key
let mapleader = ","

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" list and invisible characters
set list
set listchars=tab:▸\ ,trail:·,eol:¬

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" allow hidden dirty buffers
set hidden

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,*.jpg,*.png
set wildignore+=*.gif,*.toc,*.aux,*.bbl,*.dvi,*.pdf,*.lof,*.blg

" Status bar
set laststatus=2

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
set t_Co=256
set background=light
color solarized
set cursorline
call togglebg#map("<F5>")

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Show (partial) command in the status line
set showcmd

" makes ,w split windows vertically
nnoremap <leader>w <C-w>v<C-w>l

" split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" use hjkl for movement
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" keep at least 3 lines around the cursor
set scrolloff=3

"relative number switching
function! g:ToggleNuMode()
  if(&rnu == 1)
    set nu
  else
    set rnu
  endif
endfunction

nnoremap <C-a> :call g:ToggleNuMode()<cr>

" clear search
map <leader><space> :noh<cr>

filetype plugin on

" make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" Ruby
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" coffeescript styles
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" use ack
nnoremap <leader>a :Ack

" highlight current line
set cul

" reselect pasted text
nnoremap <leader>v V`]

" run tests
map <leader><CR> :call RunTest()<cr>

function! RunTest()
  :wa
  let filename = @%

  if filename =~ '_test.rb'
    call RunTestUnit(filename)
  elseif filename =~ '_spec.rb'
    call RunRSpec(filename)
  elseif filename =~ '.feature'
    call RunCucumber(filename)
  else
    call FindCorrespondingTest(filename)
  endif
endfunction

function! RunRSpec(filename)
  if filereadable("Gemfile")
    exec ":!clear && bundle exec rspec -c " . a:filename
  else
    exec ":!clear && rspec -c " . a:filename
  end
endfunction

function! RunTestUnit(filename)
  exec ":!clear && bundle exec ruby -Ilib:bin:test:. -rtest/unit " . a:filename
endfunction

function! RunCucumber(filename)
  if filereadable("Gemfile")
    exec ":!clear && bundle exec cucumber " . a:filename
  else
    exec ":!clear && cucumber " . a:filename
  end
endfunction

function! FindCorrespondingTest(filename)
  " file itself is not a test file
  " try to find a corresponding test file
  " XXX: this is pretty ugly right now but it works..
  "
  " BUG: produces for some files the following error:
  "         Error detected while processing function
  "         RunTest..FindCorrespondingTest..RunRSpec:
  "         E486: Pattern not found: spec
  "     although the spec runs as expected

  " from app/controller/ticket.rb to ticket.rb
  let filename = substitute(a:filename, '\w\+\/\w\+\/', '', 'g')

  " find RSpec
  let test_file = substitute(filename, '\.rb', '_spec.rb', 'g')
  let result = system("find . | grep '" . test_file . "'")
  if result =~ 'spec'
    let result = substitute(result, '\n', '', g)
    call RunRSpec(result)
  else
    " find Test::Unit
    let test_file = substitute(filename, '\.rb', '_test.rb', 'g')
    let result = system("find . | grep '" . test_file . "'")
    if result =~ 'test'
      let result = substitute(result, '\n', '', g)
      call RunTestUnit(result)
    endif
  endif
endfunction

" spell checking
nmap <silent> <leader>s :set spell!<CR>
" Set region to American English
set spelllang=en_us

nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" use system clipboard for yanking
set clipboard=unnamed

" set open command for ruby_doc
let g:ruby_doc_command='open'

" syntastic settings
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['ruby', 'coffee', 'sass',
                           \ 'eruby', 'haml', 'javascript', 'html'],
                           \ 'passive_filetypes': ['puppet'] }

" ctrl+p ignore settings
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.sass-cache/*  " MacOSX/Linux
set wildignore+=tmp\*,*.swp,*.zip,*.exe   " Windows

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.exe$\|\.so$\|\.dll$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" i hate folding.
set nofoldenable
